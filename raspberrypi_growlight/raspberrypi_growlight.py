# AUTOGENERATED! DO NOT EDIT! File to edit: raspberrypi_growlight.ipynb (unless otherwise specified).

__all__ = ['PIN_GPIO', 'TIMEZONE', 'INTERVAL', 'Growlight', 'Schedule', 'SunlightSchedule', 'LowellSunlightSchedule',
           'GrowlightScheduler', 'app', 'schedule', 'growlight', 'scheduler_growlight', 'STATUS', 'ON', 'OFF', 'START',
           'PAUSE', 'STATUS']

# Cell
import datetime
import sys
import time

import apscheduler.schedulers.background
import astral
import astral.sun
import pytz
import RPi.GPIO as GPIO
from flask import Flask

# Cell
PIN_GPIO = 17
GPIO.setwarnings(False)
GPIO.setmode(GPIO.BCM)         # Broadcom Chip
GPIO.setup(PIN_GPIO, GPIO.OUT) # Output

# Cell
TIMEZONE = pytz.timezone('US/Eastern')

# Cell
INTERVAL = 60

# Cell
class Growlight:
    def on(self):
        GPIO.output(PIN_GPIO, True)

    def off(self):
        GPIO.output(PIN_GPIO, False)

# Cell
class Schedule:
    def get_status(T):
        return 'OFF'

# Cell
class SunlightSchedule(Schedule):
    def __init__(self, city):
        self.city = city

    def get_status(self, T):
        s = astral.sun.sun(self.city.observer) # Get current status of sun
        if s['sunrise'] < T < s['sunset']: return 'ON'
        else:                              return 'OFF'

# Cell
class LowellSunlightSchedule(SunlightSchedule):
    def __init__(self):
        super().__init__(city=astral.LocationInfo(name='Lowell',
                                                  region='USA',
                                                  timezone='Eastern',
                                                  latitude=42.640999,
                                                  longitude=-71.316711))

# Cell
class GrowlightScheduler:
    def __init__(self, schedule, growlight, interval=INTERVAL):
        self.schedule  = schedule
        self.growlight = growlight
        self.interval  = interval
        self.scheduler = apscheduler.schedulers.background.BackgroundScheduler()
        self.scheduler.add_job(self.job, 'interval', seconds=self.interval)

    def job(self):
        T = TIMEZONE.localize(datetime.datetime.now())
        status = self.schedule.get_status(T)
        if   status == 'ON':  self.growlight.on()
        elif status == 'OFF': self.growlight.off()
        else:                 raise RuntimeError(f'Unknown status: {status}')

    def start(self):    self.scheduler.start()
    def pause(self):    self.scheduler.pause()
    def resume(self):   self.scheduler.resume()
    def shutdown(self): self.scheduler.shutdown()

    @property
    def running(self):  return self.scheduler.running

# Cell
app = Flask(__name__)
schedule = LowellSunlightSchedule()
growlight = Growlight()
scheduler_growlight = GrowlightScheduler(schedule, growlight)
STATUS = None

# Cell
@app.route('/ON/', methods=['GET'])
def ON():
    global STATUS
    if scheduler_growlight.running:
        scheduler_growlight.pause()
    growlight.on()
    STATUS = 'ON'
    return STATUS

# Cell
@app.route('/OFF/', methods=['GET'])
def OFF():
    global STATUS
    if scheduler_growlight.running:
        scheduler_growlight.pause()
    growlight.off()
    STATUS = 'OFF'
    return STATUS

# Cell
@app.route('/START/', methods=['GET'])
def START():
    global STATUS
    if not scheduler_growlight.running:
        scheduler_growlight.start()
    STATUS = 'START'
    return STATUS

# Cell
@app.route('/PAUSE/', methods=['GET'])
def PAUSE():
    global STATUS
    if scheduler_growlight.running:
        scheduler_growlight.pause()
    STATUS = 'PAUSE'
    return STATUS

# Cell
@app.route('/STATUS/', methods=['GET'])
def STATUS():
    global STATUS
    return STATUS

# Cell
if __name__ == '__main__':
    START()
    app.run(host='0.0.0.0', port=8080)